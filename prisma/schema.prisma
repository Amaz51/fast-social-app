// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id     String   @id @unique @default(cuid())
  userName   String   @unique
  password   String
  email      String   @unique
  registerAt DateTime @default(now())

  emailVerified DateTime?

  profile UserProfile?

  posts    Post[]
  comments Comments[]

  Followers Followers[]
  Following Following[]

   accounts      Account[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserProfile {
  profileid      String   @id @unique @default(cuid())
  firstName      String
  lastName       String
  bio            String
  gender         String
  dateOfBirth    DateTime
  followingCount Int      @default(0)
  followerCount  Int      @default(0)
  profilePicture String

  userid String @unique
  user   User   @relation(fields: [userid], references: [id])
}

model Post {
  postId       String   @id @unique @default(cuid())
  body         String
  title        String
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  image        String
  createdAt    DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  comments Comments[]
}

model Comments {
  commentId String   @id @unique @default(cuid())
  postedAt  DateTime
  body      String
  likeCount Int      @default(0)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  postId String
  Post   Post?  @relation(fields: [postId], references: [postId])
}

model Followers {
  id                 String   @id @unique @default(cuid())
  startedFollowingAt DateTime

  followerId String
  follower   User   @relation(fields: [followerId], references: [id])
}

model Following {
  id                 String   @id @unique @default(cuid())
  startedFollowingAt DateTime

  followingId String
  following   User   @relation(fields: [followingId], references: [id])
}
